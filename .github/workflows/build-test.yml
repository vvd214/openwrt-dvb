name: OpenWrt DVB feed buildbot

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  prepare:
    name: Prepare source
    runs-on: ubuntu-latest

    steps:
      - name: Cache sources
        uses: actions/cache/restore@v3
        with:
          key: downloads
          path: |
            sdk/dl
            sdk/feeds

      - name: Download sources
        run: |
          printenv | sort
          SDK_TAR="$(curl -s https://downloads.openwrt.org/snapshots/targets/tegra/generic/sha256sums | awk -F'*' '/openwrt-sdk/ {printf $2}')"
          git clone --depth 1 ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}.git sdk/package
          curl -O https://downloads.openwrt.org/snapshots/targets/tegra/generic/${SDK_TAR}
          tar -x -J --strip-components=1 -f ${SDK_TAR} -C "$(pwd)/sdk"
          mkdir -p sdk/dl sdk/feeds
          cd sdk
          make defconfig
          make -j$(nproc) V=s download
          make -j$(nproc) V=s package/v4l-dvb/{prepare,clean}
          rm -f -R dl/*/
          scripts/feeds update -a

  build:
    name: Build targets
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - ramips

    env:
      TARGET: ${{ matrix.target }}

    steps:
      - name: Prepare project
        run: |
          SDK_TAR="$(curl -s https://downloads.openwrt.org/snapshots/targets/${TARGET/-/\/}/sha256sums | awk -F'*' '/openwrt-sdk/ {printf $2}')"
          git clone --depth 1 ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}.git sdk/package
          curl -O https://downloads.openwrt.org/snapshots/targets/${TARGET/-/\/}/${SDK_TAR}
          tar -x -J --strip-components=1 -f ${SDK_TAR} -C "$(pwd)/sdk"

      - name: Cache sources
        uses: actions/cache@v3
        with:
          key: downloads
          path: |
            sdk/dl
            sdk/feeds

      - name: Build packages
        run: |
          mkdir -p sdk/bin sdk/dl sdk/feeds
          cd sdk
          printf "CONFIG_BUILD_LOG=y\nCONFIG_SIGNED_PACKAGES=n\n" >> .config
          make defconfig
          make -j$(nproc) V=s

      - name: Store logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}-${{ github.sha }}-logs
          path: sdk/logs/
          retention-days: 60

      - name: Store packages
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}-pkgs
          path: sdk/bin/
          retention-days: 1

  deploy:
    name: Upload packages
    needs: build
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}

    steps:
      - name: Restore packages
        uses: actions/download-artifact@v3
        with:
          path: bin

      - name: Publish packages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        run: |
          git clone --depth 1 --branch gh-pages ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}.git repo || true
          rm -R -f repo/snapshots
          mkdir -p repo/snapshots
          cp -R -f bin/*-pkgs/. repo/snapshots/.
          cd repo
          git update-ref -d HEAD
          git config --local user.name "github-actions[bot]"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "Publish ${GITHUB_WORKFLOW_SHA} packages"
          git push -f https://${GITHUB_REPOSITORY_OWNER}:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git gh-pages
